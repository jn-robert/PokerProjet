security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    encoders:
        App\Entity\User:
            algorithm: bcrypt
        #Symfony\Component\Security\Core\User\User: plaintext
    providers:
#        in_memory:   #{ memory: ~ }
#            memory:
#                users:
#                    user:  { password: user, roles: [ 'ROLE_USER' ] }
#                    admin: { password: admin, roles: [ 'ROLE_ADMIN' ] }
        our_db_provider:
            entity:
                class: App\Entity\User
                property: username
#    providers:
#        in_memory: { memory: ~ }
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            # pattern: ^/admin
            anonymous: true
            provider: our_db_provider
            form_login:
                login_path: login
                check_path: login

            # ...
            logout:
                path: /logout
                target: /
            # activate different ways to authenticate

            # http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
#        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }

    role_hierarchy:
        ROLE_USER:  ROLE_USER
        ROLE_ADMIN: [ROLE_USER, ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]